name: Build and Test

on:
  push:
    branches:
      - mock/sdk
  pull_request:

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
      safe-ref-name: ${{ steps.ref-name.outputs.value }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Generate cache key
        id: cache-key
        run: echo "key=${{ hashFiles('agent/Dockerfile.*', 'agent/templates/**') }}" >> $GITHUB_OUTPUT
        
      - name: Generate safe ref name
        id: ref-name
        run: echo "value=$(echo ${{ github.ref_name }} | sed 's/[^a-zA-Z0-9]/-/g')" >> $GITHUB_OUTPUT 
        # This converts branch names like "feature/foo" to "feature-foo"
        
      - name: Debug cache keys
        run: |
          echo "===== DEBUG INFORMATION ====="
          echo "GITHUB_SHA: ${{ github.sha }}"
          echo "GITHUB_REF: ${{ github.ref }}"
          echo "GITHUB_REF_NAME: ${{ github.ref_name }}"
          echo "GITHUB_HEAD_REF: ${{ github.head_ref }}"
          echo "GITHUB_BASE_REF: ${{ github.base_ref }}"
          echo "SAFE_REF_NAME: $(echo ${{ github.ref_name }} | sed 's/[^a-zA-Z0-9]/-/g')"
          echo "CACHE_KEY: ${{ hashFiles('agent/Dockerfile.*', 'agent/templates/**') }}"
          
          # Print the actual keys that will be used
          echo "===== GENERATED CACHE KEYS ====="
          echo "PRIMARY_KEY: ${{ runner.os }}-buildx-${{ github.sha }}-typespec-${{ hashFiles('agent/Dockerfile.*', 'agent/templates/**') }}"
          echo "BRANCH_SHA_KEY: ${{ runner.os }}-buildx-${{ github.sha }}-typespec-"
          echo "BRANCH_NAME_KEY: ${{ runner.os }}-buildx-$(echo ${{ github.ref_name }} | sed 's/[^a-zA-Z0-9]/-/g')-typespec"
          echo "GENERIC_KEY: ${{ runner.os }}-buildx-typespec"

  build-typespec:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # The issue might be related to how GitHub constructs the cache key internally
      # Let's add more explicit debug information above the actual cache step
      - name: Print exact cache keys that will be used
        run: |
          echo "LOOKING FOR THESE EXACT KEYS:"
          echo "${{ runner.os }}-buildx-${{ github.sha }}-typespec-${{ needs.setup.outputs.cache-key }}"
          echo "${{ runner.os }}-buildx-${{ github.sha }}-typespec-"
          echo "${{ runner.os }}-buildx-${{ needs.setup.outputs.safe-ref-name }}-typespec"
          echo "${{ runner.os }}-buildx-typespec"
      
      # Cache Docker layers for TypeSpec
      # The cache steps are based on the official example from actions/cache
      # https://github.com/docker/build-push-action/issues/252#issuecomment-744400425
      - name: Cache Docker layers for TypeSpec
        id: cache-typescript
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache-typespec
          key: ${{ runner.os }}-buildx-${{ github.sha }}-typespec-${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.sha }}-typespec-
            ${{ runner.os }}-buildx-${{ needs.setup.outputs.safe-ref-name }}-typespec
            ${{ runner.os }}-buildx-typespec
            
      # Debugging the cache state before build
      - name: Check cache contents before build
        run: |
          echo "Cache hit: ${{ steps.cache-typescript.outputs.cache-hit }}"
          ls -la /tmp/.buildx-cache-typespec || echo "Cache directory does not exist yet"

      - name: Build TypeSpec Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./agent
          file: ./agent/Dockerfile.typespec
          tags: botbuild/tsp_compiler
          push: false
          load: true
          # Use cache-from even on cache miss to initialize the cache
          cache-from: type=local,src=/tmp/.buildx-cache-typespec
          # Important: Write directly to the cache path that actions/cache will save
          cache-to: type=local,dest=/tmp/.buildx-cache-typespec,mode=max
          
      - name: Save TypeSpec Docker image
        run: docker save botbuild/tsp_compiler -o /tmp/tsp_compiler.tar
        
      - name: Upload TypeSpec Docker image
        uses: actions/upload-artifact@v4
        with:
          name: tsp-compiler-image
          path: /tmp/tsp_compiler.tar

  build-application:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # The issue might be related to how GitHub constructs the cache key internally
      # Let's add more explicit debug information above the actual cache step
      - name: Print exact cache keys that will be used for Application
        run: |
          echo "LOOKING FOR THESE EXACT KEYS (Application):"
          echo "${{ runner.os }}-buildx-${{ github.sha }}-app-${{ needs.setup.outputs.cache-key }}"
          echo "${{ runner.os }}-buildx-${{ github.sha }}-app-"
          echo "${{ runner.os }}-buildx-${{ needs.setup.outputs.safe-ref-name }}-app"
          echo "${{ runner.os }}-buildx-app"
          
      # Cache Docker layers for Application
      # The cache steps are based on the official example from actions/cache
      # https://github.com/docker/build-push-action/issues/252#issuecomment-744400425
      - name: Cache Docker layers for Application
        id: cache-application
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache-app
          key: ${{ runner.os }}-buildx-${{ github.sha }}-app-${{ needs.setup.outputs.cache-key }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.sha }}-app-
            ${{ runner.os }}-buildx-${{ needs.setup.outputs.safe-ref-name }}-app
            ${{ runner.os }}-buildx-app
            
      # Debugging the cache state before build
      - name: Check cache contents before build
        run: |
          echo "Cache hit: ${{ steps.cache-application.outputs.cache-hit }}"
          ls -la /tmp/.buildx-cache-app || echo "Cache directory does not exist yet"

      - name: Build Application Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./agent
          file: ./agent/Dockerfile.application
          tags: botbuild/app_schema
          push: false
          load: true
          # Use cache-from even on cache miss to initialize the cache
          cache-from: type=local,src=/tmp/.buildx-cache-app
          # Important: Write directly to the cache path that actions/cache will save
          cache-to: type=local,dest=/tmp/.buildx-cache-app,mode=max
          
      - name: Save Application Docker image
        run: docker save botbuild/app_schema -o /tmp/app_schema.tar
        
      - name: Upload Application Docker image
        uses: actions/upload-artifact@v4
        with:
          name: app-schema-image
          path: /tmp/app_schema.tar

  run-tests:
    needs: [build-typespec, build-application]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Download TypeSpec Docker image
        uses: actions/download-artifact@v4
        with:
          name: tsp-compiler-image
          path: /tmp
          
      - name: Download Application Docker image
        uses: actions/download-artifact@v4
        with:
          name: app-schema-image
          path: /tmp
          
      - name: Load Docker images
        run: |
          docker load -i /tmp/tsp_compiler.tar
          docker load -i /tmp/app_schema.tar

      - name: Pull PostgreSQL image
        run: docker pull postgres:17.0-alpine

      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Install dependencies
        run: |
          uv venv
          uv pip install -r agent/requirements.txt

      - name: Run tests
        env:
          DOCKER_HOST: unix:///var/run/docker.sock
        run: |
          # Give the current user access to docker socket
          sudo chmod 666 /var/run/docker.sock
          PYTHONPATH=$PYTHONPATH:./agent/ uv run pytest -vs agent/tests

      - name: Clean up
        if: always()
        run: |
          docker image prune -f
