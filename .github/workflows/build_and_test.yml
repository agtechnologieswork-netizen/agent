name: Build and Test

on:
  push:
    branches:
      - main
  pull_request:

env:
  CONTAINER_NAME: agent-apiserver-1
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
  GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
  ECR_REGISTRY: 361769577597.dkr.ecr.us-west-2.amazonaws.com
  ECR_REPOSITORY: appdotbuild/agent-fullstack
  AWS_REGION: us-west-2

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: debug
        if: $(git log -2 --pretty=oneline | tail -n 1 | grep "release")
        run: export RELEASE_BUILD="true"

      - name: debug 2
        run: echo ${RELEASE_BUILD}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1

      - name: Start Docker Compose services
        working-directory: ./agent/
        run: docker compose up -d --build

      - name: Run tests
        working-directory: ./agent/
        run: |
          echo "Running tests..."
          docker build --target test -t agent-test:latest .
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -e ANTHROPIC_API_KEY=${{ env.ANTHROPIC_API_KEY }} \
            -e GEMINI_API_KEY=${{ env.GEMINI_API_KEY }} \
            agent-test:latest
          exit_code=$?
          if [ $exit_code -ne 0 ]; then
            echo "Tests failed with exit code $exit_code"
            exit $exit_code
          else
            echo "Tests passed successfully!"
          fi

      - name: Check Container Health
        run: |
          echo "Checking health of container: ${{ env.CONTAINER_NAME }}"
          status=$(docker inspect --format='{{.State.Health.Status}}' ${{ env.CONTAINER_NAME }})

          if [ "$status" = "healthy" ]; then
            echo "Container is healthy!"
            exit 0
          else
            echo "Error: Container is not healthy (status: $status). Failing workflow."
            echo "--- Recent container logs: ---"
            docker logs --tail 50 ${{ env.CONTAINER_NAME }} || echo "Could not retrieve container logs."
            exit 1
          fi

      - name: Determine if release build is needed
        id: check_release
        run: |
          is_release="false"
          # FIX ME LATER
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            is_release="true"
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "closed" && "${{ github.event.pull_request.merged }}" == "true" && "${{ github.base_ref }}" == "main" ]]; then
            # This condition is technically covered by the push to main after merge,
            # but kept for clarity if needed for specific PR merged actions.
            # Usually the push to main is the definitive trigger.
            is_release="true"
            # Check if the push event contains a commit message with 'release'
            elif [[ "${{ github.event_name }}" == "push" && $(echo '${{ toJson(github.event.commits) }}' | jq -r '.[].message // ""' | grep -i -c "release") -gt 0 ]]; then
             # currently broken - not getting commit message
             # Check if any commit message in the push contains 'release' (case-insensitive)
            is_release="true"
          fi
          echo "is_release=${is_release}" >> $GITHUB_OUTPUT

      - name: Calculate Build Tag
        # Only run if we determined it's a release build
        if: steps.check_release.outputs.is_release == 'true'
        id: build_tag
        run: |
          BRANCH_NAME_RAW="${{ github.head_ref || github.ref_name }}"
          BRANCH_NAME=$(echo "$BRANCH_NAME_RAW" | sed -e 's#^refs/heads/##' -e 's#^refs/tags/##' -e 's#/#-#g' -e 's/[^a-zA-Z0-9.-]/-/g')
          SHORT_SHA=$(git rev-parse --short ${{ github.sha }})
          echo "COMMIT_SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          TAG=${BRANCH_NAME}-${SHORT_SHA}
          echo "Calculated Tag: $TAG"
          echo "image_tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Configure AWS Credentials
        if: steps.check_release.outputs.is_release == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.ECR_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.ECR_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        if: steps.check_release.outputs.is_release == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ECR_REGISTRY }}

      - name: Build and push Docker image to ECR
        if: steps.check_release.outputs.is_release == 'true'
        working-directory: ./agent/
        env:
          IMAGE_TAG: ${{ steps.build_tag.outputs.image_tag }}
        run: |
          echo "Building and pushing Docker image with tag: $IMAGE_TAG ..."
          docker buildx build \
            --platform linux/arm64 \
            --target prod \
            -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} \
            -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest \
            --push \
            .
          echo "Docker image built and pushed successfully!"

      # This step will run even if the health check step fails
      - name: Clean up Docker Compose services
        working-directory: ./agent/
        if: always() # Ensures this step runs even if previous steps fail
        run: |
          echo "Stopping and removing Docker Compose services..."
          docker compose down -v --remove-orphans # Stop, remove containers, networks, AND volumes (-v)
          echo "Cleanup complete."
