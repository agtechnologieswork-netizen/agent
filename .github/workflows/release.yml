name: Release MCP server

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version tag (e.g., v0.0.1)"
        required: true
        type: string
      commit_sha:
        description: "Commit SHA to release"
        required: true
        type: string
      release_notes:
        description: "Release notes"
        required: false
        type: string
        default: ""

permissions:
  contents: write
  actions: read

jobs:
  validate-and-tag:
    name: Validate and Create Tag
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ steps.find_run.outputs.run_id }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Validate version format
        run: |
          if [[ ! "${{ inputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version must follow format v0.0.0"
            exit 1
          fi

      - name: Validate commit exists
        run: |
          if ! git rev-parse "${{ inputs.commit_sha }}" >/dev/null 2>&1; then
            echo "Error: Commit ${{ inputs.commit_sha }} not found"
            exit 1
          fi

      - name: Check if tag already exists
        run: |
          if git rev-parse "${{ inputs.version }}" >/dev/null 2>&1; then
            echo "Error: Tag ${{ inputs.version }} already exists"
            exit 1
          fi

      - name: Find successful CI run for commit
        id: find_run
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Finding CI run for commit ${{ inputs.commit_sha }}..."
          RUN_ID=$(gh run list --commit "${{ inputs.commit_sha }}" \
            --workflow="Rust" \
            --status=success \
            --json databaseId \
            --jq '.[0].databaseId')

          if [ -z "$RUN_ID" ]; then
            echo "Error: No successful CI run found for commit ${{ inputs.commit_sha }}"
            echo "Make sure the commit has been pushed and CI completed successfully"
            exit 1
          fi

          echo "Found CI run: $RUN_ID"
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT

      - name: Verify commit for tagging
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Verify commit exists and is in the repository
          git rev-parse --verify "${{ inputs.commit_sha }}"
          echo "Commit ${{ inputs.commit_sha }} verified for release"

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: validate-and-tag
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: dabgent-mcp-linux-x86_64
          path: artifacts/linux
          run-id: ${{ needs.validate-and-tag.outputs.run_id }}
          github-token: ${{ github.token }}

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: dabgent-mcp-macos-arm64
          path: artifacts/macos
          run-id: ${{ needs.validate-and-tag.outputs.run_id }}
          github-token: ${{ github.token }}

      - name: Prepare artifacts for release
        run: |
          mkdir -p release
          mv artifacts/linux/dabgent_mcp release/dabgent_mcp-linux-x86_64
          mv artifacts/macos/dabgent_mcp release/dabgent_mcp-macos-arm64
          chmod +x release/*

          # Generate checksums
          cd release
          sha256sum dabgent_mcp-linux-x86_64 > checksums.txt
          sha256sum dabgent_mcp-macos-arm64 >> checksums.txt
          cat checksums.txt
          cd ..

          ls -lh release/

      - name: Create GitHub release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          NOTES="${{ inputs.release_notes }}"
          if [ -z "$NOTES" ]; then
            NOTES="Release ${{ inputs.version }}"
          fi

          CI_URL="https://github.com/${{ github.repository }}/actions/runs/${{ needs.validate-and-tag.outputs.run_id }}"

          cat > release_notes.md <<EOF
          $NOTES

          ---
          **Build Verification:**
          - Built from commit: \`${{ inputs.commit_sha }}\`
          - CI Run: $CI_URL
          - Artifacts can be verified against the CI build
          EOF

          gh release create "${{ inputs.version }}" \
            --repo "${{ github.repository }}" \
            --title "${{ inputs.version }}" \
            --notes-file release_notes.md \
            --target "${{ inputs.commit_sha }}" \
            release/*

      - name: Update latest tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Delete existing latest tag if it exists
          git tag -d latest 2>/dev/null || true
          git push origin :refs/tags/latest 2>/dev/null || true

          # Create new latest tag pointing to the release commit
          git tag latest "${{ inputs.commit_sha }}"
          git push origin latest

      - name: Output release URL
        run: |
          echo "Release created successfully!"
          echo "View at: https://github.com/${{ github.repository }}/releases/tag/${{ inputs.version }}"
