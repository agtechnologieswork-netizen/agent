name: Rust

on:
  push:
    branches:
      - main
  pull_request:

env:
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
  GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse

jobs:
  rust-checks:
    name: Check and Clippy
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache cargo dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: dabgent

      - name: Run cargo check all targets
        working-directory: ./dabgent
        run: cargo check --all-targets --workspace

      - name: Run cargo clippy
        working-directory: ./dabgent
        run: cargo clippy --workspace -- -W warnings
        continue-on-error: true

  rust-tests:
    name: Rust Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-nextest
        uses: taiki-e/install-action@nextest

      - name: Cache cargo dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: dabgent

      - name: Run unit tests
        working-directory: ./dabgent
        run: cargo nextest run --lib --bins --workspace

      - name: Run integration tests
        working-directory: ./dabgent
        # Run with single thread due to Dagger connection race conditions
        run: cargo nextest run --tests --workspace --test-threads=1

  check-release-condition:
    name: Check Release Condition
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Check if release build needed
        id: check
        run: |
          should_build="false"
          # we check two commits because the first commit is the merge commit
          if git log -2 --pretty=%s | tail -n 1 | grep -q "build-rust"; then
            should_build="true"
            echo "Rust build detected based on commit message."
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            should_build="true"
            echo "Rust build detected based on push to main branch."
          fi

          echo "should_build=${should_build}" >> $GITHUB_OUTPUT

  build-dabgent-mcp:
    name: Build dabgent_mcp (${{ matrix.platform }})
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 15
    needs: [rust-checks, rust-tests, check-release-condition]
    if: needs.check-release-condition.outputs.should_build == 'true'
    strategy:
      matrix:
        include:
          - platform: linux-x86_64
            runner: ubuntu-latest
          - platform: macos-arm64
            runner: macos-15-xlarge
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: dabgent

      - name: Build release binary
        run: |
          cd dabgent
          cargo build --release -p dabgent_mcp
          ls -la target/release/
        env:
          # Disable LTO on macOS for faster builds
          CARGO_PROFILE_RELEASE_LTO: ${{ matrix.platform == 'macos-arm64' && 'off' || 'thin' }}

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: dabgent-mcp-${{ matrix.platform }}
          path: dabgent/target/release/dabgent_mcp
          retention-days: 30

  smoke-test-mcp:
    name: Smoke Test MCP Binary (${{ matrix.platform }})
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 5
    needs: build-dabgent-mcp
    strategy:
      matrix:
        include:
          - platform: linux-x86_64
            runner: ubuntu-latest
          - platform: macos-arm64
            runner: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: dabgent-mcp-${{ matrix.platform }}
          path: ./binary

      - name: Make binary executable
        run: chmod +x ./binary/dabgent_mcp

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Run smoke test
        run: python3 scripts/smoke_test_mcp.py ./binary/dabgent_mcp
